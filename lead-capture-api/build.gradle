plugins {
	id 'org.jetbrains.kotlin.jvm' version '2.2.0-RC'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
	id 'org.liquibase.gradle' version '2.1.1'
	id 'org.openapi.generator' version '7.13.0'
	id 'org.jetbrains.kotlin.kapt' version "1.4.32"
}

group = 'com.lead'
version = '0.0.1-SNAPSHOT'

ext {
	mapStructVersion = "1.6.3"
	mockkVersion = "1.14.2"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.liquibase:liquibase-core'
	implementation "org.mapstruct:mapstruct:$mapStructVersion"
	implementation 'software.amazon.awssdk:sns:2.31.45'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "io.mockk:mockk:$mockkVersion"
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	kapt("org.springframework.boot:spring-boot-configuration-processor")
	kapt("org.mapstruct:mapstruct-processor:$mapStructVersion")
	kapt('org.projectlombok:lombok')
}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

allOpen {
	annotation 'jakarta.persistence.Entity'
	annotation 'jakarta.persistence.MappedSuperclass'
	annotation 'jakarta.persistence.Embeddable'
}

openApiValidate {
	inputSpec.set("$rootDir/api-spec/schema.yaml")
	recommend.set(true)
}

compileJava.dependsOn tasks.openApiGenerate

openApiGenerate {
	generatorName.set("spring")
	inputSpec.set("$rootDir/api-spec/schema.yaml")
	outputDir.set("$buildDir/generated")
	apiPackage.set("com.lead.capture")
	modelPackage.set("com.lead.capture.model")
	configOptions.set([
			interfaceOnly : "true",
			useTags       : "true",
			useSpringBoot3: "true",
			generatedConstructorWithRequiredArgs: "false",
			generateConstructorWithAllArgs: "false",
			generateBuilders: "true",
			containerDefaultToNull: "true"
	])
	typeMappings.set(["date": "LocalDate", "time": "LocalTime", "local-date-time": "LocalDateTime", "zoned-date-time": "ZonedDateTime", "big-decimal": "BigDecimal"])
	importMappings.set(["LocalDate": "java.time.LocalDate", "LocalTime": "java.time.LocalTime", "LocalDateTime": "java.time.LocalDateTime", "ZonedDateTime": "java.time.ZonedDateTime", "BigDecimal": "java.math.BigDecimal"])
}

sourceSets {
	main {
		java.srcDirs += "$buildDir/generated/src/main/java"
	}
	test {
		kotlin.srcDir("$buildDir/generated/src/main/kotlin")
		java.srcDirs += "$buildDir/generated/src/main/java"
	}
}
configurations {
	register('fooReleaseImplementation')
	register('barReleaseImplementation')
}

// Tells tasks such as "generateEffectiveLombokConfig" that these folders are generated by "openApiGenerate"
// See https://github.com/freefair/gradle-plugins/discussions/482
sourceSets.main.java.srcDirs files("${layout.buildDirectory.get().asFile}/generated/src/main/java").builtBy(tasks.openApiGenerate)
sourceSets.test.java.srcDirs files("${layout.buildDirectory.get().asFile}/generated/src/main/java").builtBy(tasks.openApiGenerate)

tasks.named('test') {
	useJUnitPlatform()
}
